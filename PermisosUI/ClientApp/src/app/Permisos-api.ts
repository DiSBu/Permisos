/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.2.0 (NJsonSchema v10.1.4.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class PermisosClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Observable<PermisosVm> {
        let url_ = this.baseUrl + "/api/Permisos";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<PermisosVm>><any>Observable.throw(e);
                }
            } else
                return <Observable<PermisosVm>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: HttpResponseBase): Observable<PermisosVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PermisosVm.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<PermisosVm>(<any>null);
    }

    post(createPermisoCommand: CreatePermisoCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Permisos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(createPermisoCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processPost(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<number>(<any>null);
    }

    getTipos(): Observable<TipoPermisosVm> {
        let url_ = this.baseUrl + "/api/Permisos/api/TiposPermiso";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetTipos(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTipos(<any>response_);
                } catch (e) {
                    return <Observable<TipoPermisosVm>><any>Observable.throw(e);
                }
            } else
                return <Observable<TipoPermisosVm>><any>Observable.throw(response_);
        });
    }

    protected processGetTipos(response: HttpResponseBase): Observable<TipoPermisosVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TipoPermisosVm.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<TipoPermisosVm>(<any>null);
    }
}

export class PermisosVm implements IPermisosVm {
    lists?: PermisoDto[] | undefined;

    constructor(data?: IPermisosVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["lists"])) {
                this.lists = [] as any;
                for (let item of _data["lists"])
                    this.lists.push(PermisoDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PermisosVm {
        data = typeof data === 'object' ? data : {};
        let result = new PermisosVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.lists)) {
            data["lists"] = [];
            for (let item of this.lists)
                data["lists"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPermisosVm {
    lists?: PermisoDto[] | undefined;
}

export class PermisoDto implements IPermisoDto {
    id?: number;
    nombreEmpleado?: string | undefined;
    apellidosEmpleado?: string | undefined;
    tipoPermiso?: TipoPermiso | undefined;
    fechaPermiso?: Date;

    constructor(data?: IPermisoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nombreEmpleado = _data["nombreEmpleado"];
            this.apellidosEmpleado = _data["apellidosEmpleado"];
            this.tipoPermiso = _data["tipoPermiso"] ? TipoPermiso.fromJS(_data["tipoPermiso"]) : <any>undefined;
            this.fechaPermiso = _data["fechaPermiso"] ? new Date(_data["fechaPermiso"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PermisoDto {
        data = typeof data === 'object' ? data : {};
        let result = new PermisoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nombreEmpleado"] = this.nombreEmpleado;
        data["apellidosEmpleado"] = this.apellidosEmpleado;
        data["tipoPermiso"] = this.tipoPermiso ? this.tipoPermiso.toJSON() : <any>undefined;
        data["fechaPermiso"] = this.fechaPermiso ? this.fechaPermiso.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IPermisoDto {
    id?: number;
    nombreEmpleado?: string | undefined;
    apellidosEmpleado?: string | undefined;
    tipoPermiso?: TipoPermiso | undefined;
    fechaPermiso?: Date;
}

export class TipoPermiso implements ITipoPermiso {
    id?: number;
    descripcion?: string | undefined;

    constructor(data?: ITipoPermiso) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descripcion = _data["descripcion"];
        }
    }

    static fromJS(data: any): TipoPermiso {
        data = typeof data === 'object' ? data : {};
        let result = new TipoPermiso();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descripcion"] = this.descripcion;
        return data; 
    }
}

export interface ITipoPermiso {
    id?: number;
    descripcion?: string | undefined;
}

export class TipoPermisosVm implements ITipoPermisosVm {
    lists?: TipoPermisoDto[] | undefined;

    constructor(data?: ITipoPermisosVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["lists"])) {
                this.lists = [] as any;
                for (let item of _data["lists"])
                    this.lists.push(TipoPermisoDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TipoPermisosVm {
        data = typeof data === 'object' ? data : {};
        let result = new TipoPermisosVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.lists)) {
            data["lists"] = [];
            for (let item of this.lists)
                data["lists"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITipoPermisosVm {
    lists?: TipoPermisoDto[] | undefined;
}

export class TipoPermisoDto implements ITipoPermisoDto {
    id?: number;
    descripcion?: string | undefined;

    constructor(data?: ITipoPermisoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descripcion = _data["descripcion"];
        }
    }

    static fromJS(data: any): TipoPermisoDto {
        data = typeof data === 'object' ? data : {};
        let result = new TipoPermisoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descripcion"] = this.descripcion;
        return data; 
    }
}

export interface ITipoPermisoDto {
    id?: number;
    descripcion?: string | undefined;
}

export class CreatePermisoCommand implements ICreatePermisoCommand {
    id?: number;
    nombreEmpleado?: string | undefined;
    apellidosEmpleado?: string | undefined;
    tipoPermiso?: TipoPermiso | undefined;
    fechaPermiso?: Date;

    constructor(data?: ICreatePermisoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nombreEmpleado = _data["nombreEmpleado"];
            this.apellidosEmpleado = _data["apellidosEmpleado"];
            this.tipoPermiso = _data["tipoPermiso"] ? TipoPermiso.fromJS(_data["tipoPermiso"]) : <any>undefined;
            this.fechaPermiso = _data["fechaPermiso"] ? new Date(_data["fechaPermiso"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreatePermisoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePermisoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nombreEmpleado"] = this.nombreEmpleado;
        data["apellidosEmpleado"] = this.apellidosEmpleado;
        data["tipoPermiso"] = this.tipoPermiso ? this.tipoPermiso.toJSON() : <any>undefined;
        data["fechaPermiso"] = this.fechaPermiso ? new Date(this.fechaPermiso).toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICreatePermisoCommand {
    id?: number;
    nombreEmpleado?: string | undefined;
    apellidosEmpleado?: string | undefined;
    tipoPermiso?: TipoPermiso | undefined;
    fechaPermiso?: Date;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}
